$colors: (
    light: (
        body-bg: $background-1--lite,
        text: $color-typo--lite,
        text-sec: $color-typo-faint--lite,
        link: $color-accent,
        hover: $color-typo--lite,
        border: $background-border-int--lite
    ),

    dark:  (
        body-bg: $background-1,
        text: $color-typo,
        text-sec: $color-typo-faint,
        link: $color-accent,
        hover: $color-typo,
        border: $background-border-interactive
    ),
);


$color-placeholder: 'light';


@function compose-color-variable($color-key) {
    @return '--color-#{$color-key}';
}

:root {
    @each $key, $value in map-get($colors, 'light') {
        #{compose-color-variable($key)}: #{$value};
    }
}

@media (prefers-color-scheme: dark) {
    :root {
        @each $key, $value in map-get($colors, 'dark') {
            #{compose-color-variable($key)}: #{$value};
        }
    }
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if not $index {
        @return $string;
    }

    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
}

@function color-get($palette, $color-key) {
    @return map-get(map-get($colors, $palette), $color-key);
}

@mixin color-assign($property, $color-key, $template: '') {
    $fallback: #{color-get("light", $color-key)};
    $var: var(#{compose-color-variable($color-key)});

    #{$property}: if(str-length($template) == 0, $fallback, #{str-replace($template, $color-placeholder, $fallback)});
    #{$property}: if(str-length($template) == 0, $var, #{str-replace($template, $color-placeholder, $var)});
}
